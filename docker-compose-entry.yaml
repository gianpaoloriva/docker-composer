
# BUILD:
version: "{{ site.compose_file_v3 }}"
services:
  webapp:
    build:
      context: ./dir
      dockerfile: Dockerfile-alternate
      args:
        buildno: 1 # Verificare arg_dockerfile
        gitcommithash: cdc3b19
#Docker File
# ARG NODE_ENV=production
# ENV NODE_ENV $NODE_ENV


# Labels
build:
  context: .
  labels:
    com.example.description: "Accounting webapp"
    com.example.department: "Finance"
    com.example.label-with-empty-value: ""

# Network
build:
  context: .
  network: host

build:
  context: .
  network: custom_network_1

build:
  context: .
  network: none

# shm_size
build:
  context: .
  shm_size: '2gb'

# Target
build:
  context: .
  target: prod

# command 
command: bundle exec thin -p 3000

# config
version: "{{ site.compose_file_v3 }}"
services:
  redis:
    image: redis:latest
    deploy:
      replicas: 1
    configs:
      - my_config
      - my_other_config
configs:
  my_config:
    file: ./my_config.txt
  my_other_config:
    external: true



version: "{{ site.compose_file_v3 }}"
services:
  redis:
    image: redis:latest
    deploy:
      replicas: 1
    configs:
      - source: my_config
        target: /redis_config
        uid: '103'
        gid: '103'
        mode: 0440
configs:
  my_config:
    file: ./my_config.txt
  my_other_config:
    external: true


#credential_spec
credential_spec:
  file: my-credential-spec.json

#depends_on
version: "{{ site.compose_file_v3 }}"
services:
  web:
    build: .
    depends_on:
      - db
      - redis
  redis:
    image: redis
  db:
    image: postgres

# deploy
version: "{{ site.compose_file_v3 }}"
services:
  redis:
    image: redis:alpine
    deploy:
      replicas: 6
      placement:
        max_replicas_per_node: 1
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure


# endpoint_mode
version: "{{ site.compose_file_v3 }}"

services:
  wordpress:
    image: wordpress
    ports:
      - "8080:80"
    networks:
      - overlay
    deploy:
      mode: replicated
      replicas: 2
      endpoint_mode: vip

  mysql:
    image: mysql
    volumes:
       - db-data:/var/lib/mysql/data
    networks:
       - overlay
    deploy:
      mode: replicated
      replicas: 2
      endpoint_mode: dnsrr

volumes:
  db-data:

networks:
  overlay:

#labels
version: "{{ site.compose_file_v3 }}"
services:
  web:
    image: web
    deploy:
      labels:
        com.example.description: "This label will appear on the web service"

#placement
version: "{{ site.compose_file_v3 }}"
services:
  db:
    image: postgres
    deploy:
      placement:
        constraints:
          - "node.role==manager"
          - "engine.labels.operatingsystem==ubuntu 18.04"
        preferences:
          - spread: node.labels.zone

# Replica
version: "{{ site.compose_file_v3 }}"
services:
  worker:
    image: dockersamples/examplevotingapp_worker
    networks:
      - frontend
      - backend
    deploy:
      mode: replicated
      replicas: 6
# resources
version: "{{ site.compose_file_v3 }}"
services:
  redis:
    image: redis:alpine
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 50M
        reservations:
          cpus: '0.25'
          memory: 20M
# Restart Policy
version: "{{ site.compose_file_v3 }}"
services:
  redis:
    image: redis:alpine
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

#update_config
version: "{{ site.compose_file_v3 }}"
services:
  vote:
    image: dockersamples/examplevotingapp_vote:before
    depends_on:
      - redis
    deploy:
      replicas: 2
      update_config:
        parallelism: 2
        delay: 10s
        order: stop-first
#devices
devices:
  - "/dev/ttyUSB0:/dev/ttyUSB0"

#env_file
env_file:
  - ./common.env
  - ./apps/web.env
  - /opt/runtime_opts.env

#environment
environment:
  RACK_ENV: development
  SHOW: 'true'
  SESSION_SECRET:

#healthcheck
healthcheck:
  test: ["CMD", "curl", "-f", "http://localhost"]
  interval: 1m30s
  timeout: 10s
  retries: 3
  start_period: 40s

#logging:
logging:
  driver: syslog
  options:
    syslog-address: "tcp://192.168.0.42:123"

#secrets
version: "{{ site.compose_file_v3 }}"
services:
  redis:
    image: redis:latest
    deploy:
      replicas: 1
    secrets:
      - my_secret
      - my_other_secret
secrets:
  my_secret:
    file: ./my_secret.txt
  my_other_secret:
    external: true

#tmpfs
- type: tmpfs
  target: /app
  tmpfs:
    size: 1000

#volume
version: "{{ site.compose_file_v3 }}"
services:
  web:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - type: volume
        source: mydata
        target: /data
        volume:
          nocopy: true
      - type: bind
        source: ./static
        target: /opt/app/static

networks:
  webnet:

volumes:
  mydata: